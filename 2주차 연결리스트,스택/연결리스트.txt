*****연결리스트*****
 -연결리스트란?
   원소를 저장할 때 그 다음 원소가 있는 위치를 포함시키는 방식으로 저장하는 자료구조
 
 -연결리스트의 성질
   1. k번째 원소를 확인/변경하기 위해 O(k)가 필요함
   2. 임의의 위치에 원소를 추가/임의 위치의 원소 제거는 O(1) <---> 배열과 큰 차이
   3. 원소들이 메모리 상에 연속해있지 않아 Cache hit rate가 낮지만 할당이 다소 쉬움
  
 -연결리스트의 종류
   단일 연결리스트 : 각 원소가 자신의 다음 원소의 주소를 들고 있는 연결리스트
   이중 연결리스트 : 각 원소가 자신의 다음 원소와 이전 원소의 주소를 들고 있는 연결리스트
   (STL에 연결리스트 존재->컨테이너 이름 list,이중 연결리스트)
   원형 연결리스트 : 끝이 처음과 연결되어 있는 연결리스트

 -배열 vs 연결리스트
                                             배열              연결리스트
   k번째 원소에 접근	        O(1)	     O(K)
   임의 위치에 원소 추가/제거         O(N)                 O(1)
   메모리 상의 배치                      연속                  불연속
   추가적으로 필요한 공간 	 		     O(N)

 - STL list

  iterator가 주소 역할을 한다. --> list<int>::iterator t를 auto t로 바꿀 수 있다.

  list의 멤버 함수 (list <int> l; 로 선언)
    -l.assign(3,4)
        4로 초기화된 3개의 원소를 할당한다.

   -l.front()
        맨 앞의 원소를 반환,참조한다.

   -l.back()
        맨 뒤의 원소를 반환,참조한다.

   -l.begin()
        맨 앞의 원소를 가리키는 iterator를 반환한다.

   -l.end()
        맨 마지막을 알 수 있는 iterator를 반환한다.

   -l.push_back(k)
        뒤쪽으로 원소 k 를 삽입한다.

   -l.push_front(k)
        앞쪽으로 원소 k 를 삽입한다.

   -l.pop_back()
        맨 마지막 원소를 제거한다.

   -l.pop_front()
        첫번째 원소를 제거한다.

   -l.insert(iter,k)
         iter가 가리키는 위치에 원소 k를 삽입한다.
        삽입한 원소를 가리키는 iterator를 반환한다.

   -l.erase(iter)
         iter가 가리키는 원소를 삭제한다.
        반환값은 삭제한 원소의 다음 원소를 가리키는 iterator를 반환한다.

   -lt.sort() 
         모든 원소를 오름차순 으로 정렬한다
         소트의 파라미터로 이항조건자가 올 수 있다.. 그때는 그 기준으로 정렬한다.

   -lt.reverse()
         원소들의 순차열을 뒤집는다.

   -lt.remove(k)
          k 와 같은 원소를 모두 제거한다.





