[큐]

const int MX = 1000005;
int dat[MX];	//데이터를 담을 원소
int head=0, tail=0; //앞쪽뒤쪽을 가리킬 원소

큐는 한쪽 끝에서 원소를 넣고 반대쪽 끝에서 원소를 뺼 수 있는 자료구조

스택에서는 먼저들어간 원소가 나중에 나왔는데

큐에서는 먼저 들어간 원소가 먼저 나오게된다.

First in First Out

선입선출

[큐의 성질]

1. 원소의 추가가 O(1)

2. 원소의 제거가 O(1)

3. 제일 앞/ 뒤의 원소 확인 O(1)

4. 제일 앞 뒤가 아닌 원소들의 확인 변경이 원칙적으로 불가능



선형배열에서 만든 큐는 삭제가 될 때 마다 쓸모없는 공간이 계속 생기게 된다.
원형 큐를 만들게 되면 이 내용이 해결된다.

[큐의 기능]
void push(int x) {
dat[tail++] = x;
}

void pop() {
head++;
}

[덱]

const int MX = 1000005;
int dat[2*MX+1];
int head = MX, tail = MX;
양쪽 끝에서 삽입과 삭제가 전부 가능한 자료구조

[덱의 성질]

1. 원소의 추가가 O(1)

2. 원소의 제거가 O(1)

3. 제일 앞/ 뒤의 원소 확인 O(1)

4. 제일 앞 뒤가 아닌 원소들의 확인 변경이 원칙적으로 불가능

[덱의 기능]

void push_front(int x) {
dat[--head] = x;
}

void push_back(int x) {
dat[tail++]=x;
}

void pop_front() {
head++;
}

void pop_back() {
tail--;
}